'''
Python Developer Applicant Programming Test

by Maxwell Hunter 4/18/2019
for Cylance
'''
import json

from flask import abort, Flask, request, jsonify
from flask_restful import reqparse as rqpar
from flask_restful import (
    Resource, Api, fields, marshal, marshal_with)
from cachelib import SimpleCache

import config

import models

# initialize the database
models.initialize()

# build the flask app
app = Flask(__name__)

cache = SimpleCache()

# marshalling fields - can be extended for various kinds of metadata
mdobj_fields = {
    'guid': fields.String,
    'expire': fields.Integer,
    'user': fields.String,
}


def get_mdobj_or_404(guid):
    '''
    This function either gets an MdObj instance by ID, or raises a 404 error.
    '''
    try:
        # get the MdObj by ID
        mdObj = models.MdObj.get(models.MdObj.guid == guid)
    # if the MdObj doesn't exist,
    except models.MdObj.DoesNotExist:
        # raise a 404 error
        abort(404, "Provided GUID not found")
    # if no error is not raised,
    else:
        # return the MdObj
        return mdObj


# add the index route to confirm the API is active,
# all the action happens in resources/guid.py
@app.route('/')
def my_guids():
    return "REST API Active"


@app.route('/api/v1/guid', methods=["POST", "DELETE"])
@app.route('/api/v1/guid/<guid>', methods=["GET", "POST", 'DELETE'])
def mdObj_api(guid=None):
    if request.method == "GET":
        '''
        The GET method uses the @marshal_with decorator to return an MdObj
        instance, selected by ID, with a 200 status code, or it raises a 404.
        '''
        rv = cache.get('{}'.format(guid))
        if rv is None:
            rv = get_mdobj_or_404(guid)
            cache.set('{}'.format(guid), rv, timeout=60)
        return (jsonify(marshal(rv, mdobj_fields)), 200)

    elif request.method == "POST":
        '''
        The PUT method uses the marshal function to create or update
        an MdObj instance. The logic on when it does what is the most
        complicated for sure, but at a high level it goes something like this:

        if PUT was called with a GUID argument:
            Try to update the entry with that GUID
            if an entry doesn't exist to update, create it
        if PUT was called without an GUID argument:
            create a new entry from the arguments
        '''
        print('POST')
        # build a request parser
        reqparse = rqpar.RequestParser()
        # pull the user arguments
        reqparse.add_argument(
            'user',
            required=False,
            help='Please provide a user with your request',
            location=['body']
        )
        # pull the expire argument
        reqparse.add_argument(
            'expire',
            required=False,
            help='invalid expiration date, please use a UNIX timetamp',
            location=['form-data', 'body']
        )
        # save args to the resource object
        json_data = request.get_json(force=True)

        print("json_data: {}".format(json_data))
        try:
            # if an expiration timestamp isn't set,
            if json_data['expire'] is None:
                # add the default (now+30 days)
                expire = models.Set_Expiration()
        except KeyError:
            # if an expiration timestamp isn't set, json will raise a keyerror
            expire = models.Set_Expiration()
        # if an expiration timestamp is set explicitly,
        else:
            try:
                # convert the argument to an integer
                expire = int(json_data['expire'])
            except ValueError:
                abort(
                    400,
                    "invalid expiration date, please use a UNIX timetamp")

        # if no guid is provided,
        if guid is None:
            # create a new instance with a randomly generated guid
            json_data = marshal(
                models.MdObj.create(
                    # user is always required for new objects
                    user=json_data['user'],
                    # either from the arugment, or 30 days from now by default
                    expire=expire),
                mdobj_fields)
            # (generated by default if no guid is provided)
            return (jsonify(json_data),
                    # return 201: created
                    201)
        # if a guid has been provided,
        else:
            # test it for validity
            models.validate_GUID(guid)
            try:
                # UPDATE #
                # a user is not always provided on updates.
                # if it's not supplied in arguments,
                if json_data['user'] is None:
                    # remove it from args
                    del json_data['user']
                # build the update query and execute
                # NOTE may throw a DoesNotExist (see except)
                mdobj = models.MdObj.update(
                    **json_data
                ).where(models.MdObj.guid == guid).execute()
                # return the updated model
                json_data = marshal(mdobj, mdobj_fields)
                cache.set('{}'.format(guid), jsonify(json_data), timeout=60)
                return (jsonify(json_data), 200)
            # if an object matching the guid is not found,
            except models.MdObj.DoesNotExist:
                # CREATE WITH GUID #
                print('# CREATE WITH GUID #')
                # create a new one
                json_data = marshal(
                    models.MdObj.create(
                        # user is always required to create
                        # could do *args here, but explicit is better
                        user=json_data['user'],
                        guid=guid,
                        expire=expire
                    ), mdobj_fields
                )
                cache.set('{}'.format(guid), json_data, timeout=5 * 60)
                return (jsonify(json_data), 201)
    elif request.method == "DELETE":
        '''
        The DELETE method deletes an MdObj instance
        '''
        # build the delete query
        query = models.MdObj.delete().where(models.MdObj.guid == guid)
        # execute the query
        query.execute()
        # return 204 response (no content)
        return ('', 204)
    else:
        return ("Bad Request", 405)


if __name__ == '__main__':
    '''
    Runs the api server if name is main
    '''
    app.run(debug=config.DEBUG, host=config.HOST,
            port=config.PORT)  # pragma: no cover
